AWSTemplateFormatVersion: 2010-09-09
Parameters:
  CustomerGatewayIpAddress:
    Type: String
  CustomerGatewayBgpASN:
    Type: Number
    Default: 64000
  TunnelInsideCidr1:
    Type: String
    Default: 169.254.6.0/30
  TunnelInsideCidr2:
    Type: String
    Default: 169.254.7.0/30
  HostedZoneName:
    Type: String
    Default: hcl.intranet
  ApplicationPort:
    Type: Number
    Default: 443
  CertificateArn:
    Type: String
  SpotPrice:
    Type: Number
    Default: 0.008
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: >-
      Select ssh key from a list which will be used to access ec2 instances over
      ssh
  EC2InstanceType:
    Type: String
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.large
    Default: t2.micro
    Description: Enter instance type eg. t2.medium or t2.micro
  ApplicationImageId:
    Type: AWS::EC2::Image::Id
    Description: API service AMI identifier.
  MinFleetSize:
    Type: Number
    Default: 3
  MaxFleetSize:
    Type: Number
    Default: 9
  DesiredFleetCapacity:
    Type: Number
    Default: 3
  TargetTrackingValue:
    Type: Number
    Default: 80
  DbName:
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '8'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Default: master
  DbMasterUsername:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DbMasterPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '8'
  DbInstanceClass:
    Default: db.t2.micro
    Description: Database instance class
    Type: String
    AllowedValues:
      - db.t2.micro
      - db.m1.small
      - db.m1.large
      - db.m1.xlarge
      - db.m2.xlarge
    ConstraintDescription: must select a valid database instance type.
  DirectoryPassword:
    Type: String
    Default: Password1234++
    Description: >-
      SimpelAD directory password. SimpleAD is used to resolve private DNS hostnames.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Vpn Connection configuration
        Parameters:
          - CustomerGatewayIpAddress
          - CustomerGatewayBgpASN
          - TunnelInsideCidr1
          - TunnelInsideCidr2
      - Label:
          default: Application configuration
        Parameters:
          - HostedZoneName
          - ApplicationPort
          - CertificateArn
          - SpotPrice
          - KeyName
          - EC2InstanceType
          - ApplicationImageId
          - MinFleetSize
          - MaxFleetSize
          - DesiredFleetCapacity
      - Label:
          default: Database configuration
        Parameters:
          - DbName
          - DbMasterUsername
          - DbMasterPassword
          - DbInstanceClass
Resources:
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 172.0.0.0/16
  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: 172.0.1.0/24
      AvailabilityZone: eu-west-1a
  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: 172.0.2.0/24
      AvailabilityZone: eu-west-1b
  PrivateSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: 172.0.3.0/24
      AvailabilityZone: eu-west-1c
  VpnCustomerGateway:
    Type: 'AWS::EC2::CustomerGateway'
    Properties:
      Type: ipsec.1
      IpAddress:
        Ref: CustomerGatewayIpAddress
      BgpAsn:
        Ref: CustomerGatewayBgpASN
  VpnGateway:
    Type: 'AWS::EC2::VPNGateway'
    Properties:
      Type: ipsec.1
  VpnConnection:
    Type: 'AWS::EC2::VPNConnection'
    Properties:
      Type: ipsec.1
      CustomerGatewayId:
        Ref: VpnCustomerGateway
      StaticRoutesOnly: true
      VpnGatewayId:
        Ref: VpnGateway
      VpnTunnelOptionsSpecifications:
        - TunnelInsideCidr:
            Ref: TunnelInsideCidr1
        - TunnelInsideCidr:
            Ref: TunnelInsideCidr2
  VpnConnectionRoute1:
    Type: 'AWS::EC2::VPNConnectionRoute'
    Properties:
      DestinationCidrBlock:
        Ref: TunnelInsideCidr1
      VpnConnectionId:
        Ref: VpnConnection
  VpnConnectionRoute2:
    Type: 'AWS::EC2::VPNConnectionRoute'
    Properties:
      DestinationCidrBlock:
        Ref: TunnelInsideCidr2
      VpnConnectionId:
        Ref: VpnConnection
  VpnGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: Vpc
      VpnGatewayId:
        Ref: VpnGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: Vpc
  RouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PrivateSubnetA
  RouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PrivateSubnetB
  RouteTableAssociationC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PrivateSubnetC
  VpnGatewayRoutePropagation:
    Type: 'AWS::EC2::VPNGatewayRoutePropagation'
    Properties:
      RouteTableIds:
        - Ref: RouteTable
      VpnGatewayId:
        Ref: VpnGateway
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow https access
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp:
            Ref: TunnelInsideCidr1
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp:
            Ref: TunnelInsideCidr2
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp:
            Ref: TunnelInsideCidr1
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp:
            Ref: TunnelInsideCidr2
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http(s) to client host
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Ref: TunnelInsideCidr1
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Ref: TunnelInsideCidr2
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Fn::GetAtt:
              - LoadBalancerSecurityGroup
              - GroupId
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: 
            Fn::GetAtt:
              - LoadBalancerSecurityGroup
              - GroupId
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: 'application'
      Scheme: 'internal'
      Subnets:
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
        - Ref: PrivateSubnetC
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup
      Tags:
        - Key: stack-name
          Value:
            Fn::Sub: ${AWS::StackName}
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      Port:
        Ref: ApplicationPort
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      HealthyThresholdCount: 3
      VpcId:
        Ref: Vpc
  HttpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Ref: CertificateArn
      SslPolicy: ELBSecurityPolicy-2016-08
  ParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: Postgres parameter group
      Family: postgres9.6
      Parameters:
        timezone: Europe/Vilnius
  DbSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Postgres subnet group
      SubnetIds:
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
        - Ref: PrivateSubnetC
  DbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow postgres connection
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: 
            Fn::GetAtt:
              - EC2SecurityGroup
              - GroupId
  DbInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName:
        Ref: DbName
      DBInstanceClass:
        Ref: DbInstanceClass
      DBParameterGroupName:
        Ref: ParameterGroup
      AllocatedStorage: 8
      Engine: postgres
      EngineVersion: 9.6.9
      MasterUsername:
        Ref: DbMasterUsername
      MasterUserPassword:
        Ref: DbMasterPassword
      DBSubnetGroupName:
        Ref: DbSubnetGroup
      VPCSecurityGroups:
        - Ref: DbSecurityGroup
      PubliclyAccessible: false
      MultiAZ: true
      StorageType: gp2
    DeletionPolicy: Snapshot
  EC2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - 'logs:*'
              Resource: '*'
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - Ref: EC2InstanceRole
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId:
        Ref: ApplicationImageId
      InstanceType:
        Ref: EC2InstanceType
      AssociatePublicIpAddress: false
      KeyName:
        Ref: KeyName
      SecurityGroups:
        - Ref: EC2SecurityGroup
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      SpotPrice:
        Ref: SpotPrice
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      Cooldown: '300'
      DesiredCapacity:
        Ref: DesiredFleetCapacity
      HealthCheckGracePeriod: 0
      HealthCheckType: EC2
      MaxSize:
        Ref: MaxFleetSize
      MinSize:
        Ref: MinFleetSize
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      MetricsCollection:
        - Granularity: 1Minute
      TargetGroupARNs:
        - Ref: TargetGroup
      VPCZoneIdentifier:
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
        - Ref: PrivateSubnetC
      Tags:
        - Key: stack-name
          Value:
            Fn::Sub: ${AWS::StackName}
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        PauseTime: PT1S
  ScalingPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName:
        Ref: AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue:
          Ref: TargetTrackingValue
  HostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name:
        Ref: HostedZoneName
      VPCs:
        - VPCId:
            Ref: Vpc
          VPCRegion:
            Fn::Sub: ${AWS::Region}
      HostedZoneConfig:
        Comment: HCL intranet zone
  RecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name:
        Ref: HostedZoneName
      HostedZoneId:
        Ref: HostedZone
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - LoadBalancer
            - DNSName
        EvaluateTargetHealth: true
        HostedZoneId:
          Fn::GetAtt:
            - LoadBalancer
            - CanonicalHostedZoneID
  Directory:
    Type: 'AWS::DirectoryService::SimpleAD'
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}.com
      Description: Directory service used to resolve private DNS names
      Password:
        Ref: DirectoryPassword
      Size: Small
      VpcSettings:
        VpcId:
          Ref: Vpc
        SubnetIds:
          - Ref: PrivateSubnetA
          - Ref: PrivateSubnetB
Outputs:
  VpcId:
    Value:
      Ref: Vpc
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-Vpc'
  StackName:
    Value:
      Fn::Sub: '${AWS::StackName}'
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-StackName'
  PrivateSubnetA:
    Value:
      Ref: PrivateSubnetA
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-PrivateSubnetA'
  PrivateSubnetB:
    Value:
      Ref: PrivateSubnetB
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-PrivateSubnetB'
  PrivateSubnetC:
    Value:
      Ref: PrivateSubnetC
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-PrivateSubnetC'
  DnsIpAdddresses:
    Value:
      Fn::Join:
        - ','
        -
          - Fn::Select:
              - 0
              - Fn::GetAtt:
                - Directory
                - DnsIpAddresses
          - Fn::Select:
              - 1
              - Fn::GetAtt:
                - Directory
                - DnsIpAddresses
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-DnsIpAddresses'
  Hostname:
    Value:
      Ref: HostedZoneName
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}-Hostname'